// Code generated by protoc-gen-go. DO NOT EDIT.
// source: usermgr.proto

/*
Package usermgr is a generated protocol buffer package.

It is generated from these files:
	usermgr.proto

It has these top-level messages:
	User
	UserRequest
	UserResponse
*/
package usermgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id     string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Device string `protobuf:"bytes,4,opt,name=device" json:"device,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type UserRequest struct {
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type UserResponse struct {
	Count int32   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UserResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "usermgr.User")
	proto.RegisterType((*UserRequest)(nil), "usermgr.UserRequest")
	proto.RegisterType((*UserResponse)(nil), "usermgr.UserResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SweatMgr service

type SweatMgrClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*UserResponse, error)
}

type sweatMgrClient struct {
	cc *grpc.ClientConn
}

func NewSweatMgrClient(cc *grpc.ClientConn) SweatMgrClient {
	return &sweatMgrClient{cc}
}

func (c *sweatMgrClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/usermgr.SweatMgr/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sweatMgrClient) ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/usermgr.SweatMgr/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SweatMgr service

type SweatMgrServer interface {
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	ListUsers(context.Context, *google_protobuf.Empty) (*UserResponse, error)
}

func RegisterSweatMgrServer(s *grpc.Server, srv SweatMgrServer) {
	s.RegisterService(&_SweatMgr_serviceDesc, srv)
}

func _SweatMgr_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SweatMgrServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgr.SweatMgr/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SweatMgrServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SweatMgr_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SweatMgrServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgr.SweatMgr/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SweatMgrServer).ListUsers(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SweatMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgr.SweatMgr",
	HandlerType: (*SweatMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _SweatMgr_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _SweatMgr_ListUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgr.proto",
}

func init() { proto.RegisterFile("usermgr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xed, 0x76, 0xb7, 0xb5, 0x53, 0xeb, 0x61, 0xa8, 0x25, 0xd4, 0x4b, 0x59, 0x11, 0x7a,
	0x4a, 0xa1, 0x5e, 0x3c, 0x78, 0x12, 0x44, 0x04, 0xbd, 0xac, 0xf8, 0x03, 0xda, 0xee, 0xb8, 0x04,
	0xdc, 0xcd, 0x9a, 0x64, 0x15, 0xaf, 0xfe, 0x72, 0xc9, 0x4c, 0x7b, 0x50, 0xf0, 0x96, 0xf7, 0xf2,
	0xbd, 0x4c, 0xe6, 0xc1, 0xa4, 0xf3, 0xe4, 0xea, 0xca, 0xe9, 0xd6, 0xd9, 0x60, 0x71, 0xb8, 0x97,
	0xf3, 0xf3, 0xca, 0xda, 0xea, 0x8d, 0x56, 0x6c, 0x6f, 0xbb, 0xd7, 0x15, 0xd5, 0x6d, 0xf8, 0x12,
	0x2a, 0xbf, 0x85, 0xf4, 0xc5, 0x93, 0xc3, 0x53, 0x48, 0x4c, 0xa9, 0x92, 0x45, 0x6f, 0x39, 0x2a,
	0x12, 0x53, 0x22, 0x42, 0xda, 0x6c, 0x6a, 0x52, 0x7d, 0x76, 0xf8, 0x8c, 0x33, 0x18, 0x94, 0xf4,
	0x61, 0x76, 0xa4, 0x52, 0x76, 0xf7, 0x2a, 0xbf, 0x84, 0x71, 0x7c, 0xa3, 0xa0, 0xf7, 0x8e, 0x7c,
	0x88, 0x58, 0x1c, 0x6d, 0x4a, 0xd5, 0x13, 0x4c, 0x54, 0xfe, 0x00, 0x27, 0x82, 0xf9, 0xd6, 0x36,
	0x9e, 0x70, 0x0a, 0xd9, 0xce, 0x76, 0x4d, 0x60, 0x2c, 0x2b, 0x44, 0xe0, 0x05, 0x64, 0x91, 0xf7,
	0x2a, 0x59, 0xf4, 0x97, 0xe3, 0xf5, 0x44, 0x1f, 0xb6, 0xe2, 0xac, 0xdc, 0xad, 0xbf, 0x7b, 0x70,
	0xfc, 0xfc, 0x49, 0x9b, 0xf0, 0x54, 0x39, 0xbc, 0x86, 0xe1, 0x3d, 0x05, 0xde, 0x62, 0xfa, 0x9b,
	0x96, 0x0f, 0xcd, 0xcf, 0xfe, 0xb8, 0x32, 0x3f, 0x3f, 0xc2, 0x1b, 0x18, 0x3d, 0x1a, 0xcf, 0x51,
	0x8f, 0x33, 0x2d, 0x3d, 0xe9, 0x43, 0x4f, 0xfa, 0x2e, 0xf6, 0xf4, 0x6f, 0x7a, 0x3b, 0x60, 0xf0,
	0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x0c, 0xa5, 0x0b, 0x78, 0x01, 0x00, 0x00,
}
